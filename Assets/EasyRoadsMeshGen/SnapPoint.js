//Add this script to an empty object to snap the end points of the Easy Roads mesh to the current transform
//This script is automatically added to all Nav Points generated by ER to do the check and return transform information to the Mesh Gen script.

public var passive : boolean = false;
@HideInInspector
public var snapped : boolean = false;
@HideInInspector
public var originalPos : Vector3 = Vector3.zero;
@HideInInspector
public var originalRot : Vector3 = Vector3.zero;
@HideInInspector
public var snapModeInt : int = 0;
@HideInInspector
public var snappedToPoint : Transform;
private var updateLoopCount : int = 0;

function OnDrawGizmos () {
	//move point to snapped
	if(updateLoopCount < 6)
		updateLoopCount++;
	else{
		if(snapped)
			UpdatePos();
		updateLoopCount = 0;
	}
}

private function UpdatePos () {
	if(!snappedToPoint)
			return;
	
	var inverseFactor : Vector3 = Vector3.zero;
	
	if(snapModeInt == 1)
		inverseFactor = Vector3(1,1,1);
	if(snapModeInt == 2)
		inverseFactor = Vector3(1,0,0);
	if(snapModeInt == 3)
		inverseFactor = Vector3(0,1,0);
	if(snapModeInt == 4)
		inverseFactor = Vector3(0,0,1);
	if(snapModeInt == 5)
		inverseFactor = Vector3(1,1,0);
	if(snapModeInt == 6)
		inverseFactor = Vector3(1,0,1);
	if(snapModeInt == 7)
		inverseFactor = Vector3(0,1,1);
	
	transform.position = snappedToPoint.position;
	transform.eulerAngles = snappedToPoint.eulerAngles + inverseFactor * 180;
}

function SnapToPointTransform () {
	var inverseFactor : Vector3 = Vector3.zero;
	
	if(snapModeInt == 1)
		inverseFactor = Vector3(1,1,1);
	if(snapModeInt == 2)
		inverseFactor = Vector3(1,0,0);
	if(snapModeInt == 3)
		inverseFactor = Vector3(0,1,0);
	if(snapModeInt == 4)
		inverseFactor = Vector3(0,0,1);
	if(snapModeInt == 5)
		inverseFactor = Vector3(1,1,0);
	if(snapModeInt == 6)
		inverseFactor = Vector3(1,0,1);
	if(snapModeInt == 7)
		inverseFactor = Vector3(0,1,1);
	
	
	if(passive)
		return;
	originalPos = transform.position;
	originalRot = transform.eulerAngles;
	
	snapped = true;
	
	var waypoints: SnapPoint[] = GameObject.FindObjectsOfType(SnapPoint) as SnapPoint[];
	var closest: GameObject;
	var closeDist : float = Mathf.Infinity;
	for (waypoint in waypoints) { 
     var dist = (transform.position - waypoint.transform.position).sqrMagnitude; 
		if (dist < closeDist && waypoint.transform.gameObject != transform.gameObject) { 
			closeDist = dist; 
			closest = waypoint.transform.gameObject; 
			snappedToPoint = closest.transform;
        } 
	}
	
	if(closest){
		transform.position = closest.transform.position;
		transform.eulerAngles = closest.transform.eulerAngles + inverseFactor * 180;
	}else
		Debug.Error("No Objects Found!");
}

function UnSnap () {
	if(passive)
		return;
	snapped = false;
	transform.position = originalPos;
	transform.eulerAngles = originalRot;
}